[tool.poetry]
name = "rag-chat-app"
version = "1.0.0"
description = "Streamlit RAG Chat App with MongoDB and Pinecone"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false # Keep this line

[tool.poetry.dependencies]
python = "^3.10"
streamlit = ">=1.36"
openai = ">=1.40.0"
# pinecone-client = "^6.0.0" # <-- REMOVED OLD NAME
pinecone = ">=5.0.0"      # <-- ADDED NEW NAME
pydantic = ">=2.5.0"
pypdf = ">=4.0.0"
python-docx = ">=1.0.0"
pymongo = ">=4.7.3"
dnspython = ">=2.6.1"
streamlit-authenticator = ">=0.3.0"
bcrypt = ">=4.0.0"
pyreadline3 = {markers = "sys_platform == \"win32\"", version = "^3.5.4"}


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-mock = "^3.10.0"
ruff = "^0.4.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration (from previous step)
[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "ANN",# flake8-annotations
    "BLE",# flake8-blind-except
    "FBT",# flake8-boolean-trap
    "ISC",# flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "INP",# flake8-no-pep420
    "PIE",# flake8-pie
    "T20",# flake8-print
    "PYI",# flake8-pyi
    "PT", # flake8-pytest-style
    "RET",# flake8-return
    "SLF",# flake8-self
    "SIM",# flake8-simplify
    "TID",# flake8-tidy-imports
    "TCH",# flake8-type-checking
    "ARG",# flake8-unused-arguments
    "PTH",# flake8-use-pathlib
    "ERA",# eradicate
    "PD", # pandas-vet
    "PGH",# pygrep-hooks
    "PL", # Pylint
    "TRY",# tryceratops
    "FLY",# flynt
    "NPY",# NumPy specific rules
    "PERF",# Perflint
    "RUF",# Ruff-specific rules
    "DTZ",# flake8-datetimez
    "S",  # flake8-bandit (security)
    "EM", # flake8-errmsg
    "D",  # pydocstyle
]
ignore = [
    "ANN101", # Ignore missing type hints for `self`
    "ANN102", # Ignore missing type hints for `cls`
    "ANN401", # Ignore `Any` type allowed
    "D100",   # Ignore missing docstring in public module
    "D104",   # Ignore missing docstring in public package
    "D107",   # Ignore missing docstring in `__init__`
    "D203",   # Ignore one-blank-line-before-class (conflicts with D211)
    "D213",   # Ignore multi-line-summary-second-line (conflicts with D212)
    "COM812", # Ignore missing trailing comma (handled by formatter)
    "ISC001", # Ignore implicitly concatenated strings (handled by formatter)
    "RUF001", # Ignore ambiguous unicode characters (like your emojis)
]

[tool.ruff.lint.per-file-ignores]
# Ignore long lines (E501) and commented out code (ERA001) in i18n file
"config/i18n.py" = ["E501", "ERA001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

