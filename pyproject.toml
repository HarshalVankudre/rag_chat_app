[tool.poetry]
name = "rag-chat-app"
version = "1.0.0"
description = "A production-grade RAG chat app"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[[tool.poetry.source]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
streamlit = ">=1.36"
openai = ">=1.40.0"
pydantic = ">=2.5.0"
pypdf = ">=4.0.0"
pymongo = ">=4.7.3"
dnspython = ">=2.6.1"
streamlit-authenticator = ">=0.3.0"
bcrypt = ">=4.0.0"
# Switched from pinecone-client to pinecone
pinecone = "^7.3.0"
# CPU-only ONNX Runtime for lightweight server deployments
onnxruntime = "^1.23.2"
# CPU-only PyTorch for docling (prevents NVIDIA/CUDA dependencies)
torch = {version = "2.5.0+cpu", source = "torch-cpu"}
torchvision = {version = "0.20.0+cpu", source = "torch-cpu"}
# Rich document parsing with OCR support
docling = ">=0.5.0"
rapidocr-onnxruntime = "^1.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-mock = "^3.12.0"
ruff = "^0.4.0"
pre-commit = "^3.7.0"
mypy = "^1.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# -----------------------------------------------------------------
# RUFF CONFIGURATION (LATEST)
# -----------------------------------------------------------------

[tool.ruff]
# Settings that apply to BOTH linting and formatting
line-length = 100
target-version = "py310"

[tool.ruff.lint]
# A more modern, comprehensive ruleset than default
select = [
    "E",  # pycodestyle (errors)
    "W",  # pycodestyle (warnings)
    "F",  # pyflakes (errors)
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ANN",# flake8-annotations
    "BLE",# flake8-blind-except
    "D",  # pydocstyle
    "S",  # flake8-bandit (security)
    "T20",# flake8-print
    "SIM",# flake8-simplify
    "PTH",# flake8-use-pathlib
    "TRY",# tryceratops
    "RUF",# Ruff-specific rules
]

# Ignore specific errors
ignore = [
    "D203", # Incompatible with D211
    "D212", # Incompatible with D213
    "D213", # Incompatible with D212
    "ANN101", # Missing type annotation for 'self'
    "ANN102", # Missing type annotation for 'cls'
    "ERA001", # "Commented out code" - we ignore this
    "RUF001", # Ignore ambiguous unicode (emojis)
]

# Configure pydocstyle
[tool.ruff.lint.pydocstyle]
convention = "google" # Use Google-style docstrings

[tool.ruff.lint.per-file-ignores]
# Ignore long lines (E501) in the i18n file
"config/i18n.py" = ["E501"]
# Ignore "hardcoded password" (S105) in the settings model
"models/settings.py" = ["S105"]
# Allow tests to use "assert" (S101)
"tests/*.py" = ["S101"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

